#!/bin/bash
#SPDX-License-Identifier: Apache-2.0
#Copyright 2018-2025 Gliim LLC.  
#Licensed under Apache License v2. See LICENSE file.
#On the web http://golf-lang.com/ - this file is part of Golf framework.

if [ $EUID -eq 0 ]; then echo "You cannot run this as sudo or root"; exit 1;  fi
#determine library existance for Golf compilation process (both produce and apps)

#
# Get the based-on name for a current distro
#
. /etc/os-release
if [[ -f /etc/debian_version ||  "$ID" == "debian" || "$ID" == "ubuntu" || "$ID_LIKE" == *"debian"* || "$ID_LIKE" == *"ubuntu"* ]]; then
    GG_REL_NAME="debian"
    GG_REL_INSTALL="sudo apt -y install "
elif [[ -f /etc/fedora-release ||  "$ID" == "fedora" || "$ID" == "redhat" || "$ID_LIKE" == *"redhat"* || "$ID_LIKE" == *"fedora"*  ]]; then
    GG_REL_NAME="fedora"
    GG_REL_INSTALL="sudo dnf -y install "
    if [[ "$ID" == "redhat" || "$ID_LIKE" == *"redhat"* ]]; then GG_REL_NAME_SUB="redhat"; fi
elif [[ -f /etc/mageia-release ||  "$ID" == "mageia" || "$ID_LIKE" == *"mageia"*  ]]; then
    GG_REL_NAME="mageia"
    GG_REL_INSTALL="sudo dnf -y install "
elif [[ -f /etc/arch-release ||  "$ID" == "arch" || "$ID_LIKE" == *"arch"* ]]; then
    GG_REL_NAME="arch"
    GG_REL_INSTALL="sudo pacman --noconfirm -Sy "
elif [[ "$ID_LIKE" == *"opensuse"* || "$ID_LIKE" == *"suse"* ]]; then
    GG_REL_NAME="opensuse"
    GG_REL_INSTALL="sudo zypper --non-interactive install "
else
    GG_REL_NAME="unknown"
    GG_REL_INSTALL="Use package installer for your system to install "
fi

GG_MARIADB_I=0
GG_POSTGRES_I=1
GG_SQLITE_I=2
GG_CURL_I=3
GG_PCRE2_I=4
GG_XML_I=5
GG_CRYPTO_I=6
GG_GCC_I=7
GG_MAKE_I=8
GG_PKGCONF_I=9
GG_TAR_I=10
GG_SEL_I=11
GG_UBSAN_I=12


#get libs existence and includes
function gotlib(){
    if [ "$1" == "$GG_MARIADB_I" ]; then
        GG_MARIADB_EX=0; GG_MARIADB_INC=$(pkgconf --silence-errors  --cflags libmariadb)|| GG_MARIADB_EX=$?
        return $((GG_MARIADB_EX))
    elif [ "$1" == "$GG_POSTGRES_I" ]; then
        GG_POSTGRES_EX=0; GG_POSTGRES_INC=$(pkgconf --silence-errors  --cflags libpq)|| GG_POSTGRES_EX=$?
        return $((GG_POSTGRES_EX))
    elif [ "$1" == "$GG_SQLITE_I" ]; then
        GG_SQLITE_EX=0; GG_SQLITE_INC=$(pkgconf --silence-errors  --cflags sqlite3)|| GG_SQLITE_EX=$?
        return $((GG_SQLITE_EX))
    elif [ "$1" == "$GG_CURL_I" ]; then
        GG_CURL_EX=0; GG_CURL_INC=$(pkgconf --silence-errors  --cflags libcurl)|| GG_CURL_EX=$?
        return $((GG_CURL_EX))
    elif [ "$1" == "$GG_PCRE2_I" ]; then
        GG_PCRE2_EX=0; GG_PCRE2_INC=$(pkgconf --silence-errors  --cflags libpcre2-posix)|| GG_PCRE2_EX=$?
        return $((GG_PCRE2_EX))
    elif [ "$1" == "$GG_CRYPTO_I" ]; then
        GG_CRYPTO_EX=0; GG_CRYPTO_INC=$(pkgconf --silence-errors  --cflags libcrypto libssl)|| GG_CRYPTO_EX=$?
        return $((GG_CRYPTO_EX))
    elif [ "$1" == "$GG_XML_I" ]; then
        GG_XML_EX=0; GG_XML_INC=$(pkgconf --silence-errors  --cflags libxml-2.0)|| GG_XML_EX=$?
        return $((GG_XML_EX))
    elif [ "$1" == "$GG_GCC_I" ]; then
        GG_GCC_EX=0; which gcc >/dev/null 2>&1|| GG_GCC_EX=$?
        return $((GG_GCC_EX))
    elif [ "$1" == "$GG_MAKE_I" ]; then
        GG_MAKE_EX=0; which make >/dev/null 2>&1|| GG_MAKE_EX=$?
        return $((GG_MAKE_EX))
    elif [ "$1" == "$GG_PKGCONF_I" ]; then
        GG_PKGCONF_EX=0; which pkgconf >/dev/null 2>&1|| GG_PKGCONF_EX=$?
        return $((GG_PKGCONF_EX))
    elif [ "$1" == "$GG_TAR_I" ]; then
        GG_TAR_EX=0; which tar >/dev/null 2>&1|| GG_TAR_EX=$?
        return $((GG_TAR_EX))
    elif [ "$1" == "$GG_SEL_I" ]; then
        if [ -f /etc/selinux/config ]; then
           if [ -f "/usr/share/selinux/devel/Makefile" ]; then GG_SEL_EX=0; else GG_SEL_EX=1; fi
        else
            GG_SEL_EX=0 # declare installed for those that don't have SELinux
        fi
        return $((GG_SEL_EX))
    elif [ "$1" == "$GG_UBSAN_I" ]; then
        LDPATH=$(whereis -b ldconfig|sed 's/^.*:\s*\(.*\)$/\1/g')
        ISUBSAN=$($LDPATH -p|grep libubsan|wc -l)||true
        if [ "$ISUBSAN" == "0" ]; then
           GG_UBSAN_EX=1
        else
            GG_UBSAN_EX=0 #installed
        fi
        return $((GG_UBSAN_EX))
    fi
}

function discovery() {
    #
    # The names of toolkit packages used in pkgconfg are *different* from the actual apt, dnf etc. package names. Confusing but true.
    # At least that allows us to get include/lib flags once installed without needed to reference all the fragmented package names.
    #
    # Must first check base package, because other depend on them
    # Base:
    gotlib $GG_GCC_I || true
    gotlib $GG_PKGCONF_I || true
    gotlib $GG_MAKE_I || true
    gotlib $GG_TAR_I || true
    gotlib $GG_SEL_I || true
    GG_GCC_INSTALL="$GG_REL_INSTALL gcc"
    GG_MAKE_INSTALL="$GG_REL_INSTALL make"
    GG_PKGCONF_INSTALL="$GG_REL_INSTALL pkgconf"
    GG_TAR_INSTALL="$GG_REL_INSTALL tar"
    #
    #package name for selinux
    #
    if [ "$GG_REL_NAME" == "fedora" ]; then
        if [ "$GG_REL_NAME_SUB" == "redhat" ]; then GG_SEL_PACKAGE="policycoreutils-python-utils policycoreutils policycoreutils-devel libselinux-utils"; 
        else GG_SEL_PACKAGE="policycoreutils policycoreutils-devel libselinux-utils"; fi
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_SEL_PACKAGE="selinux-policy-devel"
    else
        #not supported otherwise
        GG_SEL_PACKAGE="SELinux development package"
    fi
    GG_SEL_INSTALL="$GG_REL_INSTALL $GG_SEL_PACKAGE"
    if [[ "$GG_PKGCONF_EX" != "0" || "$GG_GCC_EX" != "0" || "$GG_MAKE_EX" != "0" || "$GG_TAR_EX" != "0" ]]; then
        #this is okay since we always first check for base packages either in gginst.sh or gg
        return 
    fi
    # Others:
    gotlib $GG_MARIADB_I || true
    gotlib $GG_POSTGRES_I || true
    gotlib $GG_SQLITE_I || true
    gotlib $GG_CURL_I || true
    gotlib $GG_PCRE2_I || true
    gotlib $GG_CRYPTO_I || true
    gotlib $GG_XML_I || true
    gotlib $GG_UBSAN_I || true
    #

    #set libs
    if [ "$GG_MARIADB_EX" == "0" ]; then GG_MARIADB_LIB_S="-lgolfmys"; GG_MARIADB_LIB=$(pkgconf --silence-errors  --libs libmariadb); fi
    if [ "$GG_POSTGRES_EX" == "0" ]; then GG_POSTGRES_LIB_S="-lgolfpg"; GG_POSTGRES_LIB=$(pkgconf --silence-errors  --libs libpq); fi
    if [ "$GG_SQLITE_EX" == "0" ]; then GG_SQLITE_LIB_S="-lgolflite"; GG_SQLITE_LIB=$(pkgconf --silence-errors  --libs sqlite3); fi
    if [ "$GG_XML_EX" == "0" ]; then GG_XML_LIB_S="-lgolfxml"; GG_XML_LIB=$(pkgconf --silence-errors  --libs libxml-2.0); fi
    if [ "$GG_CURL_EX" == "0" ]; then GG_CURL_LIB_S="-lgolfcurl"; GG_CURL_LIB=$(pkgconf --silence-errors  --libs libcurl); fi
    if [ "$GG_PCRE2_EX" == "0" ]; then GG_PCRE2_LIB_S="-lgolfpcre2"; GG_PCRE2_LIB=$(pkgconf --silence-errors  --libs libpcre2-posix); fi
    if [ "$GG_CRYPTO_EX" == "0" ]; then GG_CRYPTO_LIB_S="-lgolfcrypto"; GG_CRYPTO_LIB=$(pkgconf --silence-errors  --libs libcrypto libssl); fi


#show install instructions, $1 is 1 if 

    #
    #package name for mariadb
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_MARIADB_PACKAGE="libmariadb-dev"
    elif [ "$GG_REL_NAME" == "fedora" ]; then
        GG_MARIADB_PACKAGE="mariadb-connector-c-devel"
    elif [ "$GG_REL_NAME" == "mageia" ]; then
        GG_MARIADB_PACKAGE="mariadb-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_MARIADB_PACKAGE="mariadb-libs"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_MARIADB_PACKAGE="libmariadb-devel"
    else
        GG_MARIADB_PACKAGE="MariaDB C Client (LGPL) development package"
    fi
    #
    #package name for postgres
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_POSTGRES_PACKAGE="libpq-dev"
    elif [ "$GG_REL_NAME" == "fedora" ]; then
        GG_POSTGRES_PACKAGE="libpq-devel"
    elif [ "$GG_REL_NAME" == "mageia" ]; then
        GG_POSTGRES_PACKAGE="postgresql-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_POSTGRES_PACKAGE="postgresql-libs"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_POSTGRES_PACKAGE="postgresql-devel"
    else
        GG_POSTGRES_PACKAGE="Postgres C Client development package"
    fi
    #
    #package name for crypto
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_CRYPTO_PACKAGE="libssl-dev"
    elif [[ "$GG_REL_NAME" == "fedora" || "$GG_REL_NAME" == "mageia" ]]; then
        GG_CRYPTO_PACKAGE="openssl-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_CRYPTO_PACKAGE="openssl"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        #provides either libressl or openssl
        GG_CRYPTO_PACKAGE="ssl-devel"
    else
        GG_CRYPTO_PACKAGE="OpenSSL C Client development package"
    fi
    #
    #package name for curl
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_CURL_PACKAGE="libcurl4-openssl-dev"
    elif [[ "$GG_REL_NAME" == "fedora" || "$GG_REL_NAME" == "mageia" ]]; then
        GG_CURL_PACKAGE="libcurl-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_CURL_PACKAGE="curl"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_CURL_PACKAGE="libcurl-devel"
    else
        GG_CURL_PACKAGE="Curl C Client development package"
    fi
    #
    #package name for xml
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_XML_PACKAGE="libxml2-dev"
    elif [[ "$GG_REL_NAME" == "fedora" || "$GG_REL_NAME" == "mageia" ]]; then
        GG_XML_PACKAGE="libxml2-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_XML_PACKAGE="libxml2"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_XML_PACKAGE="libxml2-devel"
    else
        GG_XML_PACKAGE="libXML2 C Client development package"
    fi
    #
    #package name for pcre2
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_PCRE2_PACKAGE="libpcre2-dev"
    elif [[ "$GG_REL_NAME" == "fedora" || "$GG_REL_NAME" == "mageia" ]]; then
        GG_PCRE2_PACKAGE="pcre2-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_PCRE2_PACKAGE="pcre2"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_PCRE2_PACKAGE="pcre2-devel"
    else
        GG_PCRE2_PACKAGE="PCRE2 C Client development package"
    fi
    #
    #package name for sqlite
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_SQLITE_PACKAGE="libsqlite3-dev"
    elif [ "$GG_REL_NAME" == "fedora" ]; then
        GG_SQLITE_PACKAGE="sqlite-devel"
    elif [ "$GG_REL_NAME" == "fedora" ]; then
        GG_SQLITE_PACKAGE="sqlite3-devel"
    elif [ "$GG_REL_NAME" == "arch" ]; then
        GG_SQLITE_PACKAGE="sqlite3"
    elif [ "$GG_REL_NAME" == "opensuse" ]; then
        GG_SQLITE_PACKAGE="sqlite3-devel"
    else
        GG_SQLITE_PACKAGE="SQLite C Client development package"
    fi
    #
    #package name for UBSAN (undefined behaviour sanitization)
    #
    if [ "$GG_REL_NAME" == "debian" ]; then
        GG_UBSAN_PACKAGE="libubsan1"
    else
        GG_UBSAN_PACKAGE="libubsan"
    fi

    #installation instructions for toolkit packages
    GG_POSTGRES_INSTALL="$GG_REL_INSTALL $GG_POSTGRES_PACKAGE"
    GG_MARIADB_INSTALL="$GG_REL_INSTALL $GG_MARIADB_PACKAGE"
    GG_SQLITE_INSTALL="$GG_REL_INSTALL $GG_SQLITE_PACKAGE"
    GG_CRYPTO_INSTALL="$GG_REL_INSTALL $GG_CRYPTO_PACKAGE"
    GG_XML_INSTALL="$GG_REL_INSTALL $GG_XML_PACKAGE"
    GG_CURL_INSTALL="$GG_REL_INSTALL $GG_CURL_PACKAGE"
    GG_PCRE2_INSTALL="$GG_REL_INSTALL $GG_PCRE2_PACKAGE"
    GG_UBSAN_INSTALL="$GG_REL_INSTALL $GG_UBSAN_PACKAGE"
}

#get libs names from IDs
function namelib(){
    if [ "$1" == "$GG_MARIADB_I" ]; then
        echo "$GG_MARIADB_PACKAGE"
    elif [ "$1" == "$GG_POSTGRES_I" ]; then
        echo "$GG_POSTGRES_PACKAGE"
    elif [ "$1" == "$GG_SQLITE_I" ]; then
        echo "$GG_SQLITE_PACKAGE"
    elif [ "$1" == "$GG_CURL_I" ]; then
        echo "$GG_CURL_PACKAGE"
    elif [ "$1" == "$GG_PCRE2_I" ]; then
        echo "$GG_PCRE2_PACKAGE"
    elif [ "$1" == "$GG_CRYPTO_I" ]; then
        echo "$GG_CRYPTO_PACKAGE"
    elif [ "$1" == "$GG_XML_I" ]; then
        echo "$GG_XML_PACKAGE"
    elif [ "$1" == "$GG_GCC_I" ]; then
        echo "gcc"
    elif [ "$1" == "$GG_MAKE_I" ]; then
        echo "make"
    elif [ "$1" == "$GG_PKGCONF_I" ]; then
        echo "pkgconf"
    elif [ "$1" == "$GG_TAR_I" ]; then
        echo "tar"
    elif [ "$1" == "$GG_SEL_I" ]; then
        echo "SELinux-devel"
    elif [ "$1" == "$GG_UBSAN_I" ]; then
        echo "Math-checking"
    fi
}


#display the actual install statement based on $1 which is the ID of a lib
function display_install(){
    if [ "$1" == "$GG_MARIADB_I" ]; then
        echo "$GG_MARIADB_INSTALL"
    elif [ "$1" == "$GG_POSTGRES_I" ]; then
        echo "$GG_POSTGRES_INSTALL"
    elif [ "$1" == "$GG_SQLITE_I" ]; then
        echo "$GG_SQLITE_INSTALL"
    elif [ "$1" == "$GG_CURL_I" ]; then
        echo "$GG_CURL_INSTALL"
    elif [ "$1" == "$GG_PCRE2_I" ]; then
        echo "$GG_PCRE2_INSTALL"
    elif [ "$1" == "$GG_CRYPTO_I" ]; then
        echo "$GG_CRYPTO_INSTALL"
    elif [ "$1" == "$GG_XML_I" ]; then
        echo "$GG_XML_INSTALL"
    elif [ "$1" == "$GG_GCC_I" ]; then
        echo "$GG_GCC_INSTALL"
    elif [ "$1" == "$GG_MAKE_I" ]; then
        echo "$GG_MAKE_INSTALL"
    elif [ "$1" == "$GG_PKGCONF_I" ]; then
        echo "$GG_PKGCONF_INSTALL"
    elif [ "$1" == "$GG_TAR_I" ]; then
        echo "$GG_TAR_INSTALL"
    elif [ "$1" == "$GG_SEL_I" ]; then
        echo "$GG_SEL_INSTALL"
    elif [ "$1" == "$GG_UBSAN_I" ]; then
        echo "$GG_UBSAN_INSTALL"
    fi
}

#execute or display install, $1 is list of lib IDs, $2 is 1 if exec or otherwise display
#before each install we check if installed, because it can as a dependency of one of the previous installs!
function exec_install(){
    discovery
    FINST="0"
    echo "$1"|while IFS= read -r line; do 
        case "$line" in $GG_MARIADB_I|$GG_POSTGRES_I|$GG_SQLITE_I|$GG_CURL_I|$GG_XML_I|$GG_PCRE2_I|$GG_CRYPTO_I|$GG_GCC_I|$GG_MAKE_I|$GG_PKGCONF_I|$GG_TAR_I|$GG_SEL_I|$GG_UBSAN_I) 
                if [ "$2" == "1" ]; then
                    E=0; gotlib $line||E=$?
                    if [ "$E" != "0" ]; then
                        INST=$(display_install $line)
echo "$INST"
                        if [[ "$INST" =~ ^sudo.*$ ]]; then
                            if [ "$GG_REL_NAME" == "debian" ]; then
                                #for debian/ubuntu etc, run apt update prior to the first install
                                if [ "$FINST" == "0" ]; then
                                    FINST=1
                                    echo "Updating repository..."
                                    sudo DEBIAN_FRONTEND=noninteractive apt update >/dev/null 2>&1
                                fi
                            fi
                            echo "Installing [$(namelib $line)]..."
                            if [ "$GG_REL_NAME" == "debian" ]; then
                                INST=$(sed 's/^sudo /sudo DEBIAN_FRONTEND=noninteractive /g'<<<"$INST")
                            fi
                            eval $INST >/dev/null 2>&1
                            E=0; gotlib $line||E=$?
                            if [ "$E" != "0" ]; then
                                echo "Could not install [$(namelib $line)]."
                            fi
                        fi
                    fi
                else
                    display_install $line
                fi
                ;;
            *) ;;
        esac
    done
}

#
#show install of all toolkit packages
#$1 is 1 if we should show the install command line, otherwise display library ID and return 1 if there's some missing (otherwise 0)
#
function show_install() {
    discovery
    LIST=$1
    RET=0
    if [[ "$LIST" == "1" || "$GG_POSTGRES_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_POSTGRES_I; RET=1; else display_install $GG_POSTGRES_I; fi
    fi
    if [[ "$LIST" == "1" ||  "$GG_MARIADB_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_MARIADB_I; RET=1; else display_install $GG_MARIADB_I;  fi
    fi
    if [[ "$LIST" == "1" ||  "$GG_SQLITE_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_SQLITE_I; RET=1; else display_install $GG_SQLITE_I;  fi
    fi
    if [[ "$LIST" == "1" ||  "$GG_CRYPTO_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_CRYPTO_I; RET=1; else display_install $GG_CRYPTO_I;  fi
    fi
    if [[ "$LIST" == "1" ||  "$GG_XML_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_XML_I; RET=1; else display_install $GG_XML_I;  fi
    fi
    if [[ "$LIST" == "1" ||  "$GG_CURL_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_CURL_I; RET=1; else display_install $GG_CURL_I;  fi
    fi
    if [[ "$LIST" == "1" ||  "$GG_PCRE2_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_PCRE2_I; RET=1; else display_install $GG_PCRE2_I;  fi
    fi
    exit $RET
}


#
#show min app toolkit package install for <app> 
#
function need_install() {
    discovery
    _GG_TMP_BLD=$HOME/.golf/apps/$1/.bld
    if [ ! -d "$_GG_TMP_BLD" ]; then
        echo "Directory [$_GG_TMP_BLD] not found"
    fi
    RET=0
    if [[ -f "$_GG_TMP_BLD/.mod.MARIADB" && "$GG_MARIADB_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_MARIADB_PACKAGE"
        RET=1
    fi
    if [[ -f "$_GG_TMP_BLD/.mod.POSTGRES" && "$GG_POSTGRES_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_POSTGRES_PACKAGE"
        RET=1
    fi
    if [[ -f "$_GG_TMP_BLD/.mod.CRYPTO" && "$GG_CRYPTO_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_CRYPTO_PACKAGE"
        RET=1
    fi
    if [[ -f "$_GG_TMP_BLD/.mod.XML" && "$GG_XML_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_XML_PACKAGE"
        RET=1
    fi
    if [[ -f "$_GG_TMP_BLD/.mod.SQLITE" && "$GG_SQLITE_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_SQLITE_PACKAGE"
        RET=1
    fi
    if [[ -f "$_GG_TMP_BLD/.mod.PCRE2" && "$GG_PCRE2_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_PCRE2_PACKAGE"
        RET=1
    fi
    if [[ -f "$_GG_TMP_BLD/.mod.CURL" && "$GG_CURL_EX" != "0" ]]; then
        echo "$GG_REL_INSTALL $GG_CURL_PACKAGE"
        RET=1
    fi
    exit $RET
}

#show install for base packages
function base_install(){
    discovery
    LIST=$1
    RET=0
    if [[ "$LIST" == "1" || "$GG_GCC_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_GCC_I; RET=1; else display_install $GG_GCC_I; fi
    fi
    if [[ "$LIST" == "1" || "$GG_MAKE_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_MAKE_I; RET=1; else display_install $GG_MAKE_I; fi
    fi
    if [[ "$LIST" == "1" || "$GG_PKGCONF_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_PKGCONF_I; RET=1; else display_install $GG_PKGCONF_I; fi
    fi
    if [[ "$LIST" == "1" || "$GG_TAR_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_TAR_I; RET=1; else display_install $GG_TAR_I; fi
    fi
    if [[ "$LIST" == "1" || "$GG_SEL_EX" != "0" ]]; then
        if [ "$LIST" != "1" ]; then echo $GG_SEL_I; RET=1; else display_install $GG_SEL_I; fi
    fi
    exit $RET
}



#
# Main interface for command-line use
#
function use_message() {
    echo "Usage: gglib [ -a ] [ -r <app> ] [ -l ] [ -b ] [ -h ]"
    echo "-a         shows installation instructions for all toolkit packages Golf may use that are not installed."
    echo "r <app>    shows installation instructions for all required toolkit packages for <app> that are not installed."
    echo "-b         shows base packages installation instructions for all base packages that are not installed."
    echo "-l         shows installation instructions for all toolkit packages Golf may use, whether they are installed or not."
    echo "Exit code is 0 if all packages are installed, or 1 otherwise."
}

OPT_STATUS=0
opts=$(getopt -a -n $0 -o ar:bhls --long none -- "$@") || OPT_STATUS=$? 
if [ $OPT_STATUS -ne 0 ]; then
    use_message 1>&2
    exit 1
fi

eval set -- "$opts"

while true; do 
case "$1" in                         
    -h | --help )
        use_message
        exit
        ;;
    -b )
        base_install
        shift 1
        ;;
    -l )
        show_install 1
        shift 1
        ;;
    -a )
        show_install 0
        shift 1
        ;;
    -r )
        need_install $2
        shift 2
        ;;
    -- ) 
        shift 
        break
        ;;
    * ) 
        use_message 1>&2
        exit -1
    esac
done
#after processing, there should be no more params
if [ "$1" != "" ]; then
    use_message 1>&2
    exit -5
fi

#if called without params, run its main purpose
discovery 


