.TH GOLF 2gg $VERSION $DATE Development Tools
.SH NAME
double-string \-  (strings
doubles)
.SH PURPOSE
Convert double to string.

.SH SYNTAX

.RS 4
.EX

double-string <double> [ to <string> ] \\
    [ width <width> ] \\
    [ precision <precision> ] \\
    [ format-floating | format-scientific | format-compact ]

.EE
.RE

.SH DESCRIPTION
<double> is converted to <string> in "to" clause, using <width> and <precision> (in "width" and "precision" clauses) and using one of the formats ("format-floating", "format-scientific" or "format-compact"). By default "format-floating" is used with the <precision> of 6. "format-scientific" will output in the format that uses the exponent with a single digit before the decimal point. "format-compact" will choose the shorter of the two. <double> can be positive or negative (i.e. signed) and is a 64-bit double-precision floating point value.  If "to" clause is omitted, then <double> is printed out.

If double-string prints out a double (i.e. "to" clause is omitted), and this is within \fBwrite-string\fP, then <double> is output into the buffer that builds a new string.

Note that if there's an overflow the result is "inf" or "-inf" for positive and negative infinity.

.LP
.B SHORTCUT
.LP

For convenience, you can use a shortcut for converting a double to a string, by prepending "$$" to the variable name, for example:

.RS 4
.EX

set-double n = -10.41
set-string s = "This is double " + $$n

.EE
.RE

The above is the same as:

.RS 4
.EX

set-double n = -10.41
double-string n to sval
set-string s = "This is double " + sval

.EE
.RE

Effectively, $$ in front of a double variable is the same as double-string that converts it to a string with all the default options. 

You can use $$ for an expression, in which case the expression must be within parenthesis:

.RS 4
.EX

set-double n1 = -10.41
set-double n2 = 15.13
set-string s = "This is double " + $$(n1+n2)

.EE
.RE

In this case double "s" will have value of "This is double 4.72", because doubles -10.41 and 15.13 are added to produce 4.72, which is then converted to a string and finally added to the first string.

.SH EXAMPLES
The following will allocate memory for string "x" to be "    8.8422000000e+02":

.RS 4
.EX

double-string 884.22 width 20 to str precision 10 format-scientific to x

.EE
.RE

.SH SEE ALSO
 Doubles

\fBabs-double\fP  
\fBdouble-expressions\fP  
\fBdouble-string\fP  
\fBmixing-doubles-and-numbers\fP  
\fBset-double\fP  
\fBstring-double\fP   
 Strings

\fBcopy-string\fP  
\fBcount-substring\fP  
\fBdelete-string\fP  
\fBdouble-string\fP  
\fBlower-string\fP  
\fBmatch-regex\fP  
\fBnew-string\fP  
\fBnumber-string\fP  
\fBread-split\fP  
\fBreplace-string\fP  
\fBscan-string\fP  
\fBset-string\fP  
\fBsplit-string\fP  
\fBstring-double\fP  
\fBstring-expressions\fP  
\fBstring-length\fP  
\fBstring-number\fP  
\fBtrim-string\fP  
\fBupper-string\fP  
\fBwrite-string\fP   
See all 
\fBdocumentation\fP
