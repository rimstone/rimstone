.TH GOLF 2gg $VERSION $DATE Development Tools
.SH NAME
open-file \-  (files)
.SH PURPOSE
Open file for reading and writing.

.SH SYNTAX

.RS 4
.EX

open-file <file name> file-id <file id> \\
    [ new-truncate ] \\
    [ status <status> ]

.EE
.RE

.SH DESCRIPTION
Opens file given by <file name> for reading and writing and creates an open file variable identified by <file id>.

<file name> can be a full path name, or a path relative to the application home directory (see \fBdirectories\fP).

You can obtain the status of file opening via <status> number (in "status" clause). The <status> is GG_OKAY if file is opened, or GG_ERR_OPEN if could not open file.

If "new-truncate" clause is used, a new file is created if it doesn't exist, or it is truncated if it does.

.SH EXAMPLES
Create a file (or truncate an existing one), write 25,000 rows and the read back those rows and display them, then close file:

.RS 4
.EX

%% /ofile public
    // Create new file, or truncate an old file if it exists
    open-file "testwrite" file-id nf new-truncate

    // Write 25000 rows
    start-loop repeat 25000 use i
       (( line
       @some text in line <<print-out i>>
       )) notrim
       string-length line to line_len
       write-file file-id nf from line length line_len
    end-loop

    // Rewind back to the beginning
    file-position set 0 file-id nf

    // Read all 25000 rows back, and print them out
    read-file file-id nf  to whole_file
    print-out whole_file

    // Close the file
    close-file file-id nf
%%

.EE
.RE

.SH SEE ALSO
 Files

\fBchange-mode\fP  
\fBclose-file\fP  
\fBcopy-file\fP  
\fBdelete-file\fP  
\fBfile-position\fP  
\fBfile-storage\fP  
\fBfile-uploading\fP  
\fBget-upload\fP  
\fBlock-file\fP  
\fBopen-file\fP  
\fBread-file\fP  
\fBread-line\fP  
\fBrename-file\fP  
\fBstat-file\fP  
\fBtemporary-file\fP  
\fBuniq-file\fP  
\fBunlock-file\fP  
\fBwrite-file\fP   
See all 
\fBdocumentation\fP
