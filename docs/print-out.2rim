.TH RIM 2rim $VERSION $DATE Development Tools
.SH NAME
print-out \-  (output)
.SH PURPOSE
Print data out.

.SH SYNTAX

.RS 4
.EX

print-out ( ( <string> [ length <length> ] [ url-encode | web-encode ] [ new-line ] ) \\
          | ( <number> | <double> ) new-line \\
          | source-file [ new-line ] \\
          | source-line [ new-line ] ) , ...

.EE
.RE

.SH DESCRIPTION
print-out outputs various kinds of data:

.RS 4
\[bu]    
A <string> is output:

.RS 4
.EX

print-out <string> [ <length> ] [ url-encode | web-encode ] [ new-line ]

.EE
.RE


.RS 4
\[bu]    
By default, <string> is output without any encoding (meaning a string is output exactly as it appears). To output data verbatim to a client:

.RS 4
.EX

set-string mydata="Hello world"
print-out mydata

.EE
.RE

Writing to client, outputting text followed by a horizontal rule - the text is output to a client (such as browser) as it is, and the browser will interpret tags "<br/>" and "<hr/>" as a line break and a horizonal line and display them as such:

.RS 4
.EX

print-out "This is a non-encoded output<br/>" new-line
print-out "<hr/>"

.EE
.RE

Create a query text string by means of \fBwrite-string\fP statement:

.RS 4
.EX

//
// Construct the run-time text of dynamic SQL
//
write-string qry_txt
   @select * from <<print-out table_name>>
end-write-string

.EE
.RE


.RE

.RS 4
\[bu]    
If "url-encode" clause is used, then the output is URL-encoded. This means such output is suited for use in URL parameters. Create a URL based on arbitrary strings used as URL parameters - for instance a space would be encoded as "%20" in the final output:

.RS 4
.EX

@<a href='<<print-out "/update">>?item=<<print-out item_name url-encode>>'>Update</a>

.EE
.RE


.RE
If "web-encode" clause is used, then the output is web-encoded (or HTML-encoded). This means such output is suited for use in web pages - the text will be displayed verbatim without HTML-markup being interpreted. Display "We use <hr/> markup" text, without "<hr/>" being displayed as a horizontal line:

.RS 4
.EX

print-out "We use <hr/> markup" web-encode

.EE
.RE

If "length" clause is used, then only <length> leading bytes of <string> are output. 

If "new-line" clause is used, then a new line ("\\n") is output after <string>.

Note that all bytes of <string> are output, even if <string> contains null-bytes.


.RE

.RS 4
\[bu]    
Outputs a number, given by <number>:

.RS 4
.EX

print-out <number> [ new-line ]

.EE
.RE

If "new-line" clause is used, then a new line ("\\n") is output after <number>.

To output a number to a client:

.RS 4
.EX

set-number x = 100
print-out x

.EE
.RE



.RE

.RS 4
\[bu]    
Outputs a double, given by <double> (in a "format-floating" format, see \fBdouble-string\fP):

.RS 4
.EX

print-out <double> [ new-line ]

.EE
.RE

If "new-line" clause is used, then a new line ("\\n") is output after <number>.

To output a number to a client:

.RS 4
.EX

set-number x = 100
print-out x

.EE
.RE



.RE

.RS 4
\[bu]    
Outputs a boolean, given by <bool>:

.RS 4
.EX

print-out <bool> [ new-line ]

.EE
.RE

If "new-line" clause is used, then a new line ("\\n") is output after <bool>. The value of <bool> is output as 1 if true, and 0 if false.

To output a boolean to a client (outputs 1):

.RS 4
.EX

set-bool b = true
print-out b

.EE
.RE



.RE

.RS 4
\[bu]    
Outputs the file name of the current source file.

.RS 4
.EX

print-out source-file [ new-line ]

.EE
.RE

This outputs the file name (relative to the source code directory) of the source file where the statement is located; this is often used for debugging.

If "new-line" clause is used, then a new line ("\\n") is output afterwards.

.RS 4
.EX

@This file is <<print-out source-file>>

.EE
.RE



.RE

.RS 4
\[bu]    
Outputs current line number in the source file.

.RS 4
.EX

print-out source-line [ new-line ]

.EE
.RE

This outputs the line number in the source file where the statement is located. It is often used for debugging purposes.

If "new-line" clause is used, then a new line ("\\n") is output afterwards.

.RS 4
.EX

@This line is #<<print-out source-line>>

.EE
.RE

.RE


.LP
.B LIST OF EXPRESSIONS
.LP

You can specify a list of expressions separated by a comma to print them out in the order specified, with the end result the same as if they were separate print-outs, for instance:

.RS 4
.EX

print-out str new-line, n, " some string ", str1 web-encode new-line

.EE
.RE

In this case, you'll be outputting string "str", number "n", a string constant " some string ", and a web-encoded string "str1". There are no whitespaces between each item output.
.SH SEE ALSO
 Output

\fBfinish-output\fP  
\fBflush-output\fP  
\fBoutput-statement\fP  
\fBprint-format\fP  
\fBprint-out\fP  
\fBprint-path\fP   
See all 
\fBdocumentation\fP
