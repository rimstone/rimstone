.TH GOLF 2gg $VERSION $DATE Development Tools
.SH NAME
if-defined \-  (program-flow)
.SH PURPOSE
Conditional compilation.

.SH SYNTAX

.RS 4
.EX

if-defined <symbol>
    <any code>
end-defined

if-defined <symbol> [ equal | not-equal | lesser-than | lesser-equal | greater-than | greater-equal ] <number>
    <any code>
end-defined

if-not-defined <symbol>
    <any code>
end-defined

.EE
.RE

.SH DESCRIPTION
Without a comparison clause, if-defined will cause <any code> to be compiled if <symbol> is defined (see "--cflag" option in gg); if <symbol> is not defined, then <any code> is not compiled.

With a comparison clause, if-defined will cause <any code> to be compiled if <symbol> is equal/not equal/lesser than/lesser or equal/greater than/greater or equal than <number> constant, depending on the clause used (see "--cflag" option in gg). If <symbol> is not defined, then its value is assumed to be 0, and <any code> may still be compiled if the comparison clause and the <number> are such that the condition is true for <symbol> being 0.

if-not-defined will cause <any code> to be compiled if <symbol> is not defined (see "--cflag" option in gg); if <symbol> is defined, then <any code> is not compiled.

Note that <symbol> can start with an underscore, unlike Golf variable names; this is because defined symbols aren't variables and generally are set by the outside environment or during compilation (see "--cflag" option in \fBgg\fP).

.SH EXAMPLES
The following code will have a different output depending on how is the application compiled:

.RS 4
.EX

if-defined DEF1
    @Defined
end-defined
if-not-defined DEF1
    @Not defined
end-defined
if-defined DEF2 equal 10
    @DEF2 is 10
end-defined
if-defined DEF2 equal 0
    @DEF2 is 0
end-defined

.EE
.RE

If compiled with:

.RS 4
.EX

gg -q

.EE
.RE

then the output is:

.RS 4
.EX

Not defined
DEF2 is 0

.EE
.RE

If compiled with:

.RS 4
.EX

gg -q --cflag="-DDEF1 -DDEF2=10"

.EE
.RE

then the output is:

.RS 4
.EX

Defined
DEF2 is 10

.EE
.RE

.SH SEE ALSO
 Program flow

\fBbreak-loop\fP  
\fBcall-handler\fP  
\fBcode-blocks\fP  
\fBcontinue-loop\fP  
\fBdo-once\fP  
\fBexit-handler\fP  
\fBif-defined\fP  
\fBif-true\fP  
\fBquit-process\fP  
\fBreturn-handler\fP  
\fBstart-loop\fP   
See all 
\fBdocumentation\fP
