.TH GOLF 2gg $VERSION $DATE Development Tools
.SH NAME
new-list \-  (linked-list)
.SH PURPOSE
Create linked list.

.SH SYNTAX

.RS 4
.EX

new-list <list> [ process-scope ]

.EE
.RE

.SH DESCRIPTION
new-list initializes new linked <list>, where each element is connected to the previous and next ones. 

In a linked <list> data that can be added anywhere in the list, and also accessed anywhere as well. Access to a list is sequential, meaning you can position to the first, last, next or previous element. Note that a list is accessible to the current process only.

Generally information is stored in a linked list, and retrieved (possibly many times) in any order later.

A list has a current position where an element can be read, updated, inserted or deleted (via \fBread-list\fP, \fBwrite-list\fP and \fBdelete-list\fP), and this position can be explicitly changed with \fBposition-list\fP.

.LP
.B SCOPE
.LP

A linked list is accessible to the current process only, unless "process-scope" clause is used, in which case all requests served by the process can use it (see \fBdo-once\fP for a typical way to create an object with a process scope). If "process-scope" is used, then elements of the list will keep their value between requests in the same process. 

See \fBwrite-list\fP for an example of a process-scoped list.

.SH EXAMPLES

.RS 4
.EX

new-list mylist

.EE
.RE

.SH SEE ALSO
 Linked list

\fBdelete-list\fP  
\fBget-list\fP  
\fBnew-list\fP  
\fBposition-list\fP  
\fBpurge-list\fP  
\fBread-list\fP  
\fBwrite-list\fP   
See all 
\fBdocumentation\fP
