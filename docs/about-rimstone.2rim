.TH RIM 2rim $VERSION $DATE Development Tools
.SH NAME
about-rimstone \- RimStone documentation (general)
.SH DESCRIPTION

.LP
.B WHAT IS IT
.LP

RimStone is a domain-specific language for back-end web development. It is also a general purpose programming language.

RimStone's main purpose is easy and rapid development and deployment of high-performance applications on Linux. It is a memory-safe programming language and application server, that creates native compiled executables. It is declarative, functional and service oriented.

RimStone is built with industry-standard Free Open Source libraries, extensible with C programming language, and licensed under \fBApache 2\fP Free Open Source.

.LP
.B DECLARATIVE AND FUNCTIONAL
.LP

RimStone is both declarative and functional language. For important tasks that real-world applications are made of, you'd specify (typically in a single line) what you need done, like for instance in SQL, with the exception that RimStone creates native executables for performance. At the same time, RimStone is functional with all the necessary constructs you're used to in most other languages. What's missing is complexity.

.LP
.B HOW IT WORKS
.LP

All RimStone programs are translated into C programming language, which is considered the \fBfastest and most efficient programming language\fP. RimStone's goal is to be easy to work with and quick to produce the functionality you want, yet also to create C code that would be comparable to that of an experienced C programmer. This synergy can produce the best performance with memory safety along with very simple yet powerful language statements.

.LP
.B SERVICE ORIENTED
.LP

A RimStone program works as a service provider, meaning it handles service \fBrequest\fPs by providing a reply. It can be either a \fBservice\fP or a \fBcommand-line\fP program that processes GET, POST, PUT, PATCH, DELETE or any other HTTP requests. 

The URL for a request must state the application name, and a also request name which is the source file handling it. So, "/app-name/my-request" means that application name is "app-name" and that "request_name.rim" file will implement a request handler. A request executes in this order:

.RS 4
\[bu]    
An optional before-handler handler executes (see \fBbefore-handler\fP). 

.RE

.RS 4
\[bu]    
RimStone's \fBrequest dispatcher\fP executes a \fBrequest\fP handler. 

.RE

.RS 4
\[bu]    
An optional after-handler handler executes (see \fBafter-handler\fP).
.RE


.LP
.B RUNNING AS A SERVICE
.LP

A RimStone service is served by either

.RS 4
\[bu]    
a fixed number of service processes, or

.RE

.RS 4
\[bu]    
a dynamic number based on the request load, from 0 to any maximum number specified.
.RE
Each RimStone service process handles one request at a time, and all such processes work in parallel. This means you do not need to worry about thread-safety with RimStone. Server processes generally stay up across any number of requests, increasing response time. The balance between the number of processes and the memory usage during high request loads can be achieved with adaptive feature of \fBmrim\fP, RimStone's service process manager. 

A service can be requested by:

.RS 4
\[bu]    
reverse proxies, such as Apache, Nginx, HAProxy etc.,

.RE

.RS 4
\[bu]    
programs written in any language using \fBClient-API\fP,

.RE

.RS 4
\[bu]    
RimStone's own \fBrim\fP utility (see -r option), or \fBrimcli\fP command-line client.

.RE

.RS 4
\[bu]    
another RimStone service by means of \fBcall-remote\fP (on secure networks) and \fBcall-web\fP (on the web via SSL/TSL secure connections).

.RE

.RS 4
\[bu]    
standard web utilities like \fBcurl\fP.
.RE

With \fBcall-remote\fP, you can execute remote requests in parallel, and get results, error messages and exit status in a single statement. This makes it easy to distribute and parallelize your application logic and/or build application tiers on a local or any number of remote machines, without having to write any multi-threaded code.

.LP
.B COMMAND-LINE PROGRAM
.LP

A \fBcommand-line\fP program handles a single request before it exits. This may be suitable for batch jobs, for use in shell scripts, for testing/mocking, as well as any other situation where it is more useful or convenient to execute a command-line program. Note that a command-line program can double as \fBCGI\fP (Common Gateway Interface) as well.

.LP
.B USAGE
.LP

RimStone services and command-line programs can implement most back-end application layers, including 

.RS 4
\[bu]    
presentation (eg. building a web page), 

.RE

.RS 4
\[bu]    
application logic,

.RE

.RS 4
\[bu]    
data (eg. database) layers, and any others.
.RE


.LP
.B LANGUAGE AND SAFETY
.LP

RimStone programming language is memory-safe, meaning it will prevent you from accidentally overwriting memory or freeing it when it shouldn't be. RimStone's \fBmemory-handling\fP is not limited to just memory safety; it also includes automatic freeing of memory at the end of a request, preventing memory leaks which can be fatal to long running processes. Similarly, files open with file-handling statements are automatically closed at the end of each request, serving the same purpose. 

RimStone goes a step further from memory safety. It also enforces status checking for statements that may cause serious application logic errors. This is done by checking for negative status outcome at run-time, but only if your code does not check for status, and by stopping the application if it happens. This provides for much safer application run-time because it prevents further execution of the program if such outcome happens, and it also forces the developer to add necessary status checks when needed. This feature is automatic and has an extremely low impact on performance.

.LP
.B TYPES
.LP

RimStone is a strongly-typed language, with only four primitive types (numbers, doubles, strings and booleans) and a number of structured types (array, message, split-string, hash, tree, tree-cursor, fifo, lifo, list, file and service). RimStone is a declarative language, with a few lines of code implementing large functionalities. RimStone is also very simple, as it's designed to achieve application goals with less coding.

The number type is a signed 64-bit integer (as a decimal, octal or hexadecimal C notation). The double type is a signed double precision 64-bit floating point numeric value. The boolean type evaluates to true (non-zero) or false (zero). The string type evaluates to any sequence of bytes (binary or text) that is always trailed with a null character regardless, which is not counted in string's length. All constants follow C rules of formatting.

.LP
.B STATEMENTS
.LP

RimStone \fBstatements\fP are designed for safety, ease of use, and ability to write stable code. Most statements typically perform common complex tasks with options to easily customize them; such options are processed at compile-time whenever possible, increasing run-time performance.

.LP
.B VARIABLES, SCOPE
.LP

A variable is created the first time it's encountered in any given scope, and is never created again in the same or inner scopes, which avoids common bugs involving more than one variable with the same name in related scopes. You can still of course create variables with the same name in unrelated scopes (see \fBcode-blocks\fP). 

Some structured types (hash, tree, list) as well as primitive types (numbers, doubles, strings and booleans) can be created with process-scope, meaning their value persists throughout any requests served by the same process. This is useful for making data-server services that allow keeping and fast querying of data (such as caches or data services).

Numbers and booleans are assigned by value, while strings are assigned by reference (for obvious reason to avoid unnecessary copying).

.LP
.B INFRASTRUCTURE
.LP

RimStone includes request-processing and all the necessary infrastructure, such as for process management, files, networking, service protocols, database, string processing etc.

.LP
.B PERFORMANCE
.LP

RimStone is a compiled language. RimStone applications are native executables by design, hence no byte-code, interpreters and similar. Since RimStone is declarative, just a few \fBstatements\fP are needed to implement lots of functionality. These statements are implemented in pure C, and are not slowed down by memory checks as they are safe internally by implementation. Only developer-facing RimStone code needs additional logic to enforce memory safety, and that's a very small part of overall run-time cost. 

.LP
.B DATABASE ACCESS
.LP

RimStone provides access to a number of popular databases, such as MariaDB/mySQL, PostgreSQL and SQLite. (see \fBdatabase-config-file\fP):

.RS 4
\[bu]    
transactional support (begin, commit, rollback),

.RE

.RS 4
\[bu]    
protection against SQL injections for safety, 

.RE

.RS 4
\[bu]    
automatic and persistent database connections with unlimited reuse across all SQL queries.

.RE

.RS 4
\[bu]    
prepared SQL statements.
.RE


.LP
.B PROVEN LIBRARIES
.LP

RimStone uses well-known and widely used Free Open Source libraries like cURL, openSSL, crypto, libbacktrace, fastcgi, standard database-connectivity libraries from MariaDB, PostgreSQL, SQLite etc., for compliance, performance and reliability.

.LP
.B WEB FRAMEWORK FOR C PROGRAMMING LANGUAGE
.LP

In extended mode, RimStone is also a \fBweb-framework-for-C-programming-language\fP.

.LP
.B NAMES OF OBJECTS
.LP

Do not use object names (such as variables and request names) that start with "_rim_" or "rim_" (including upper-case variations) as those are reserved by RimStone.

.LP
.B CONTRIBUTIONS
.LP

See \fBcontributions\fP for more information.

.LP
.B AUTHOR
.LP

RimStone programming language (or rimstone-lang) is created and written by Serge Miatovich (hello@rimstone-lang.com). 
.SH SEE ALSO
 General

\fBabout-rimstone\fP  
\fBdevel-versus-release\fP  
\fBdirectories\fP  
\fBpermissions\fP   
See all 
\fBdocumentation\fP
