.TH RIM 2rim $VERSION $DATE Development Tools
.SH NAME
string-double \-  (strings
doubles)
.SH PURPOSE
Convert string to double.

.SH SYNTAX

.RS 4
.EX

string-double <string> [ to <double> ] \\
    [ status <status> ] 

.EE
.RE

.SH DESCRIPTION
<string> is converted to <double> in "to" clause.

<status> double (in "status" clause) is RIM_OKAY if conversion was successful. If it wasn't successful, <double> is 0.0 and <status> is RIM_ERR_OVERFLOW if <string> represents a double that requires over 64 bits of storage, RIM_ERR_INVALID if cannot convert, RIM_ERR_EXIST if <string> is empty or no digits specified. If there are trailing invalid characters (for instance "182.33xy"), <double> is the result of conversion up to the first invalid character and <status> is RIM_ERR_TOO_MANY. In this example, <double> would be 182.33.

.LP
.B SHORTCUT
.LP

For convenience, you can use a shortcut for converting a string to a double, by prepending "##" to the variable name, for example:

.RS 4
.EX

set-string s = "-10.31"
set-double n = ##s + 10

.EE
.RE

The above is the same as:

.RS 4
.EX

set-string s = "-10.31"
string-double s to val
set-double n = val + 10

.EE
.RE

Effectively, ## in front of a string variable is the same as string-double that converts it to a double. If a string cannot be converted to a double, your program will \fBerror out\fP. To check values with a status, use string-double.

You can use ## for an expression, in which case the expression must be within parenthesis:

.RS 4
.EX

set-string s1 = "-10.31"
set-string s2 = "2"
set-double n = ##(s1+s2) + 10

.EE
.RE

In this case double "n" will have value of -0.312, because strings "s1" and "s2" concatenate to produce "-10.312", which is then converted to a double and finally 10 added to it, producing -0.312.

.SH EXAMPLES
In this example, double "n" would be 49.11 and status "st" would be RIM_OKAY:

.RS 4
.EX

string-double "49.11" to n status st

.EE
.RE

.SH SEE ALSO
 Doubles

\fBabs-double\fP  
\fBdouble-expressions\fP  
\fBdouble-string\fP  
\fBmixing-doubles-and-numbers\fP  
\fBset-double\fP  
\fBstring-double\fP   
 Strings

\fBcopy-string\fP  
\fBcount-substring\fP  
\fBdelete-string\fP  
\fBdouble-string\fP  
\fBlower-string\fP  
\fBmatch-regex\fP  
\fBnew-string\fP  
\fBnumber-string\fP  
\fBread-split\fP  
\fBreplace-string\fP  
\fBscan-string\fP  
\fBset-string\fP  
\fBsplit-string\fP  
\fBstring-double\fP  
\fBstring-expressions\fP  
\fBstring-length\fP  
\fBstring-number\fP  
\fBtrim-string\fP  
\fBupper-string\fP  
\fBwrite-string\fP   
See all 
\fBdocumentation\fP
