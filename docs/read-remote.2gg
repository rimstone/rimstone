.TH GOLF 2gg $VERSION $DATE Development Tools
.SH NAME
read-remote \-  (distributed-computing)
.SH PURPOSE
Get results of a service call.

.SH SYNTAX

.RS 4
.EX

read-remote <service> \\
    [ data <data> ] \\
    [ error <error> ] \\
    [ status <status> ] \\
    [ status-text <status text> ] \\
    [ exit-status <service status> ]

.EE
.RE

.SH DESCRIPTION
Use read-remote to get the results of \fBcall-remote\fP created in \fBnew-remote\fP; the same <service> must be used in all.


.B - Getting the reply from server

The service reply is split in two. One part is the actual result of processing (called "stdout" or standard output), and that is "data". The other is the error messages (called "stderr" or standard error), and that's "error". The standard output goes to "data", except from \fBreport-error\fP and \fBprint-format\fP (with "to-error" clause) which goes to "error". Note that "data" and "error" streams can be co-mingled when output by the service, but they will be obtained separately. This allows for clean separation of output from any error messages.

<data> is the "data" reply of a service call (in "data" clause). <error> is the "error" reply (in "error" clause). 


.B - Getting status of a service call

The status of a service call (as a number) can be obtained in <status> (in "status" clause). This is the protocol status, and it may be:

.RS 4
\[bu]    
GG_OKAY if request succeeded,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_RESOLVE_ADDR if host name for TCP connection cannot be resolved,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_PATH_TOO_LONG if path name of Unix socket is too long,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_SOCKET if cannot create a socket (for instance they are exhausted for the process or system),

.RE

.RS 4
\[bu]    
GG_CLI_ERR_CONNECT if cannot connect to server (TCP or Unix alike),

.RE

.RS 4
\[bu]    
GG_CLI_ERR_SOCK_WRITE if cannot write data to server (for instance if server has encountered an error or is down, or if network connection is no longer available),

.RE

.RS 4
\[bu]    
GG_CLI_ERR_SOCK_READ if cannot read data from server (for instance if server has encountered an error or is down, or if network connection is no longer available),

.RE

.RS 4
\[bu]    
GG_CLI_ERR_PROT_ERR if there is a protocol error, which indicates a protocol issue on either or both sides,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_BAD_VER if either side does not support protocol used by the other,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_SRV if server cannot complete the request,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_UNK if server does not recognize record types used by the client,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_OUT_MEM if client is out of memory,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_ENV_TOO_LONG if the combined length of all environment variables is too long,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_ENV_ODD if the number of supplied environment name/value pairs is incorrect,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_BAD_TIMEOUT if the value for timeout is incorrect,

.RE

.RS 4
\[bu]    
GG_CLI_ERR_TIMEOUT if the request timed out based on "timeout" parameter or otherwise if the underlying Operating System libraries declared their own timeout.
.RE

You can also obtain the status text in <status text> (in "status-text" clause); this is a human readable status message which is am empty string (i.e. "") if there is no error (meaning if <status> is GG_OKAY).


.B - Getting service status

<service status> (in "exit-status" clause) is the return status (as a number) of the code executing a remote service handler; it is conceptually similar to a return value from a function (as a number). The particular service handler you are calling may or may not return the status; if it does, its return status can be sent back via \fBexit-status\fP and/or \fBexit-handler\fP statement.

You must specify at least one value to obtain in read-remote, or any number of them.

.SH EXAMPLES
See examples in \fBnew-remote\fP and \fBcall-remote\fP.
.SH SEE ALSO
 Distributed computing

\fBcall-remote\fP  
\fBnew-remote\fP  
\fBread-remote\fP  
\fBrun-remote\fP   
See all 
\fBdocumentation\fP
