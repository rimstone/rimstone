.TH RIM 2rim $VERSION $DATE Development Tools
.SH NAME
print-format \-  (output)
.SH PURPOSE
Outputs formatted data.

.SH SYNTAX

.RS 4
.EX

print-format <format> , <variable> [ , <variable> ]... \\
    [ to-error ] \\
    [ to <string> ] [ url-encode | web-encode ]

.EE
.RE

.SH DESCRIPTION
print-format will format a string according to the <format> string and a list of <variable>s and then outputs the result. By default, the output is not encoded (meaning a string is output exactly as it is, and the client may interpret such text in any way it sees fit). If "web-encode" clause is used, then the output is web-encoded (or HTML-encoded);this means such output is suited for use in web pages - meaning any HTML-markup will be properly encoded. If "url-encode" clause is used, then the output is URL-encoded; this means such output is suited for use in URL parameters.

.LP
.B FORMAT
.LP

<format> string must be a literal. Variables must follow <format> separated by commas in the same order as placeholders. If you use any placeholders other than specified below, or the type of variables you use do not match the type of a corresponding placeholder in <format>, your program will \fBerror out\fP. You can use the following placeholders in <format>:

.RS 4
\[bu]    
%s for a string

.RE

.RS 4
\[bu]    
%c for a number displayed as a character,

.RE

.RS 4
\[bu]    
%<number>s for a string output with a width of at least <number> (any excess filled with spaces to the left),

.RE

.RS 4
\[bu]    
%ld for a 64-bit signed number. Use "lo" for displaying in octal notation and "lx" for hexadecimal notation.

.RE

.RS 4
\[bu]    
%<number>ld for a 64-bit signed number output with a width of at least <number> (any excess filled with spaces to the left). Use "lo" for displaying in octal notation and "lx" for hexadecimal notation.
.RE


.RE

.RS 4
\[bu]    
%hd for a 32-bit signed number. Use "hu" for displaying as unsigned number, "ho" for displaying in octal notation and "hx" for hexadecimal notation.

.RE

.RS 4
\[bu]    
%<number>hd for a 32-bit signed number output with a width of at least <number> (any excess filled with spaces to the left). Use "ho" for displaying as unsigned number, "ho" for displaying in octal notation and "hx" for hexadecimal notation.

.RE

.RS 4
\[bu]    
%hhd for a signed 8-bit number. Use "hhu" for displaying as unsigned number, "hho" for displaying in octal notation and "hhx" for hexadecimal notation.

.RE

.RS 4
\[bu]    
%<number>hhd for a number output with a width of at least <number> (any excess filled with spaces to the left). Use "hhu" for displaying as unsigned number, "hho" for displaying in octal notation and "hhx" for hexadecimal notation.

.RE

.RS 4
\[bu]    
%<width>f for a double output in fixed-point notation, with the 6 digits after decimal point ("format-floating" clause in \fBdouble-string\fP); %<width>e for scientific notation with one digit before the decimal point, along with the exponent ("format-scientific" clause in \fBdouble-string\fP); %<width>g displays either %f or %e format based on which is more compact ("format-compact" clause in \fBdouble-string\fP); in any case <width> represents the width of at least <width> bytes output. You can also use <widith>.<precision> to specify both width and precision, or ".<precision>" for just precision; for instance, "%10f" or "%12.4e" etc.
.RE

If "to-error" clause is used, the output is sent to "stderr", or standard output stream.

If "to" clause is used, then the output of print-format is stored into <string>. 
To output data (the string output is "the number is 20"):

.RS 4
.EX

print-format "%s is %hd", "the number", 20

.EE
.RE

Create a query text string by means of \fBwrite-string\fP statement:

.RS 4
.EX

//
/ Construct the run-time text of dynamic SQL
//
write-string qry_txt
@select * from <<print-format "%s where id="%ld", table_name, id_num>>
end-write-string

.EE
.RE

This example of web encoding displayes text containing HTML tags without them being rendered in the browser:

.RS 4
.EX

print-format "We use %s markup", "<hr/>" web-encode

.EE
.RE

Here's an example of URL encoding. It creates a URL based on arbitrary strings used as URL parameters - for instance space would be encoded as "%20" in the final output:

.RS 4
.EX

@<a href='<<print-path "/update">>?val=<<print-format "Purchased %s for %ld dollars", piece_desc, price url-encode>>'>Log transaction</a>

.EE
.RE

.SH SEE ALSO
 Output

\fBfinish-output\fP  
\fBflush-output\fP  
\fBoutput-statement\fP  
\fBprint-format\fP  
\fBprint-out\fP  
\fBprint-path\fP   
See all 
\fBdocumentation\fP
