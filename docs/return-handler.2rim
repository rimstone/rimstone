.TH RIM 2rim $VERSION $DATE Development Tools
.SH NAME
return-handler \-  (program-flow)
.SH PURPOSE
Return from current request handler back to its caller.

.SH SYNTAX

.RS 4
.EX

return-handler  [ <return value> ]

.EE
.RE

.SH DESCRIPTION
Returns from current request handler by transferring control back to its caller. If the current request handler is handling an external request (such as from a web browser, API, command line etc.), then return-handler is equivalent to \fBexit-handler\fP. If the current request handler was handling an internal request (i.e. called from another request handler with \fBcall-handler\fP), then control transfers back to that handler immediately after call-handler.

For internal requests, the number <return value> will be passed back to the caller, who can obtain it via "return-value" clause in \fBcall-handler\fP. If <return value> is omitted, or if no return-handler is used (and the request handler finished by reaching its end), then it is 0. If current request handler is handling an external request, then <return value> will also set the handler's exit status (see \fBexit-status\fP and \fBexit-handler\fP).

.SH EXAMPLES
In this example, "req-handler" (the caller) will call "other-handler" (the callee), which will return to the caller (immediately after call-handler). Here's the caller:

.RS 4
.EX

begin-handler /req-handler public
    ...
    call-handler "/other-handler" return-value rval
    ...
end-handler

.EE
.RE

The callee handler:

.RS 4
.EX

begin-handler /other-handler public
    ...
    return-handler 5
    ...
end-handler
The value of "rval" in the caller will be 5.

.EE
.RE

.SH SEE ALSO
 Program flow

\fBbreak-loop\fP  
\fBcall-handler\fP  
\fBcode-blocks\fP  
\fBcontinue-loop\fP  
\fBdo-once\fP  
\fBexit-handler\fP  
\fBif-defined\fP  
\fBif-true\fP  
\fBquit-process\fP  
\fBreturn-handler\fP  
\fBstart-loop\fP   
See all 
\fBdocumentation\fP
