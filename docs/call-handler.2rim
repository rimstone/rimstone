.TH RIM 2rim $VERSION $DATE Development Tools
.SH NAME
call-handler \-  (service-processing
program-flow)
.SH PURPOSE
Call another handler within the same process.

.SH SYNTAX

.RS 4
.EX

call-handler <request path> [ return-code  <return code> ] \\
    [ set-param ( <name> [ = <value> ] ) , ... ] \\
    [ get-param ( <name> [ type <type> ] [ default-value <value> ] ) , ... ]

.EE
.RE

.SH DESCRIPTION
Calls another handler within the same request in the same process. You can call any handler within the same application. "Calling a handler" means executing it solely within the context of the top handler currently running; no before-handler or after-handler will execute for the called handler.

<request path> is the \fBrequest\fP path served by the handler being called. It can be a string variable or a constant.

Use \fBset-param\fP and \fBget-param\fP to pass parameters between the caller and callee handlers.

You can obtain a <return code> from the called handler <request path> by using "return-code" clause. See \fBreturn-handler\fP on how to return a code (i.e. a number value) from <request path> handler.

call-handler uses the same high-performance hash table used by a \fBrequest\fP to route requests by name; if <request path> is a constant string, then a hash table lookup is performed only once for the life of the process and all subsequent calls use a cached address of the request handler.

.LP
.B PARAMETERS
.LP

You can set parameters before call-handler executes using "set-param" clause, which behaves the same way as if those parameters were set just before call-handler; see \fBset-param\fP for more details. You can also get parameters after call-handler executes using "get-param" clause, which behave the same way as if those parameters were to be obtained just after call-handler; see \fBget-param\fP for more details. For example:

.RS 4
.EX

call-handler "/handler" set-param inp=1, var="some data" get-param out, new_var type number

.EE
.RE

is the same as:

.RS 4
.EX

set-param inp=1, var="some data"
call-handler "/handler"
get-param out, new_var type number

.EE
.RE


.LP
.B CALL DEPTH
.LP

There is a limit on the call depth, including recursion in order to prevent application and system stability issues. See \fBget-app\fP and \fBset-app\fP with "stack-depth" clause for details and on how to change the defaults.

.SH EXAMPLES
The following example demonstrate calling a call-handler twice, and also using its output inline in the caller. An input parameter is passed to it, and an output obtained:

Copy to file "callsub.rim":

.RS 4
.EX

%% /callsub public
    //
    // First call to call-handler
    //
    // Set input for call-handler
    set-param inp = "some string"
    (( s
    call-handler "/sub/service"
    ))
    // Get output from call-handler
    get-param out type string
    @<<print-out s>> with output [<<print-out out>>]

    //
    // Second call to call-handler
    //
    // Set input for call-handler called as inline code
    set-param inp = "new string"
    (( s
    @Output: <<call-handler "/sub/service">>
    ))
    // Get output from call-handler
    get-param out type string
    @<<print-out s>> with output [<<print-out out>>]
%%

.EE
.RE

And in "sub/service.rim" file (meaning file "service.rim" in subdirectory "sub"):

.RS 4
.EX

%% /sub/service private
    @This is sub!
    get-param inp
    (( out
    @got input: <<print-out inp>>
    ))
    set-param out = out
%%

.EE
.RE

Create and build an application:

.RS 4
.EX

rim -k subhandler
rim -q

.EE
.RE

Run it:

.RS 4
.EX

rim -r --req="/callsub" --exec --silent-header

.EE
.RE

The output:

.RS 4
.EX

This is sub! with output [got input: some string]
Output: This is sub! with output [got input: new string]

.EE
.RE

.SH SEE ALSO
 Program flow

\fBbreak-loop\fP  
\fBcall-handler\fP  
\fBcode-blocks\fP  
\fBcontinue-loop\fP  
\fBdo-once\fP  
\fBexit-handler\fP  
\fBif-defined\fP  
\fBif-true\fP  
\fBquit-process\fP  
\fBreturn-handler\fP  
\fBstart-loop\fP   
 Service processing

\fBafter-handler\fP  
\fBbefore-handler\fP  
\fBbegin-handler\fP  
\fBcall-handler\fP  
\fBinput-output-parameters\fP   
See all 
\fBdocumentation\fP
