.TH GOLF 2gg $VERSION $DATE Development Tools
.SH NAME
debugging \- Golf documentation (debugging)
.SH DESCRIPTION

.LP
.B STACK TRACES
.LP

If there is an error in a Golf program (such as trying to access invalid memory, negative status that hasn't been checked etc.), or if there's an internal issue (such as a bug in Golf), a stack trace is created in trace directory (see \fBdirectories\fP). A single stack trace file is created for each such incident, containing the description of the issue and the file names, function names and line numbers in your source code that led to it. The file names are based on the process-ID of the affected process. There is a limit on how many stack frames Golf will show this way (from the bottom up) - currently it's 150.

.LP
.B VIEW STACK TRACES
.LP

To see errors reported by Golf (such as trying to access invalid memory, or crashes; but not those from \fBreport-error\fP), use -e option of \fBgg\fP to check the stack trace files, which contain the stack along with file names, function names and line numbers. For example, to see the last 3 errors reported:

.RS 4
.EX

gg -e 3

.EE
.RE

Note that function names are decorated; meaning if a request name has a hyphen ("-"), then it is substituted with an underscore ("_") in a function name; if it has a forward slash ("/"), then it is substituted with a double underscore ("__"). For instance, request "request/sub-request" will be internally represented as function "request__sub_request" and will show up like that in a stack trace.

.LP
.B OUTPUT FROM GOLF SERVICE WITHOUT A WEB SERVER
.LP

Use \fBgg\fP (see -r option) to send a request from command line, and receive reply from your \fBservice\fPs. This is useful in debugging issues and automating tests. For instance, the following will issue a request and receive a reply from your service:

.RS 4
.EX

gg -r --req="/my-service" --service --exec

.EE
.RE


.LP
.B ISSUES IN STARTING MGRG
.LP

\fBmgrg\fP starts your \fBservice\fP process(es). If you're having issues with mgrg, check out its log. Assuming your application name is "app-name", the log file is:

.RS 4
.EX

$HOME/.golf/app-name/mgrglog/log

.EE
.RE


.LP
.B WEB SERVER ERROR LOG
.LP

If you are using a web server as a reverse proxy, check its error log, which would store the error messages emitted. Typically, such files are in the following location:

.RS 4
.EX

/var/log/<web server>

.EE
.RE

(for example /var/log/apache2), but the location may vary - consult your web server's documentation.

.LP
.B USING GDB DEBUGGER
.LP

In order to use gdb debugger, you don't need to do anything special. Golf itself as well as applications created with Golf already come with debugging information.

Ultimately, you can attach a debugger to a running Golf process. If your application name is "app-name", first find the PID (process ID) of its process(es):

.RS 4
.EX

ps -ef|grep app-name.srvc

.EE
.RE

Note that you can control the number of worker processes started, and thus have only a single worker process (or the minimum necessary), which will make attaching to the process that actually processes a request easier (see \fBgg\fP).

Use gdb to load your program:

.RS 4
.EX

sudo gdb $HOME/.golf/apps/app-name/.bld/app-name.srvc

.EE
.RE

and then attach to the process (<PID> is the process ID you obtained above):

.RS 4
.EX

att <PID>

.EE
.RE

Once attached, you can break in the request you're debugging:

.RS 4
.EX

br <request name>

.EE
.RE

or in general Golf request dispatcher:

.RS 4
.EX

br gg_dispatch_request

.EE
.RE

which would handle any request to your application. Request names are decorated to become function names (see above).

Note that by default, gdb will show Golf code and you can step through it as you've written it, which is easy to follow and understand. 

However, if you wish to step through the underlying C libraries, use "--c-lines" option in \fBgg\fP when making your application. 
.SH SEE ALSO
 Debugging

\fBdebugging\fP   
See all 
\fBdocumentation\fP
